name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  
  # 手动触发
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff mypy
    
    - name: Create test env.json
      run: |
        # Create minimal env.json for testing (not committed to repo)
        echo '{"WECHAT_ACCOUNT_NAME":"test","COOKIE":"test","TOKEN":"test"}' > env.json
    
    - name: Lint with ruff (allow failures for legacy code)
      run: |
        # Check for serious errors in script/ and tests/
        ruff check script/ tests/ --output-format=github || echo "Some linting issues found - see output above"
        # Also check analysis/ but don't fail if there are issues with legacy code
        ruff check analysis/ --output-format=github || echo "Legacy analysis code has linting issues - will be addressed in future refactoring"
    
    - name: Format check with ruff (allow failures for legacy code)
      run: |
        # Check code formatting for script/ and tests/
        ruff format --check script/ tests/ || echo "Formatting issues found in main code"
        # Also check analysis/ but don't fail
        ruff format --check analysis/ || echo "Legacy analysis code has formatting issues"
    
    - name: Type check with mypy (focus on script/)
      run: |
        # Type check the main script directory
        mypy script/ --ignore-missing-imports
        # Try analysis/ but don't fail if issues (legacy code)
        mypy analysis/ --ignore-missing-imports || echo "Type check issues in analysis/ - will be addressed in future refactoring"
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=script --cov=analysis --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security check
      run: |
        bandit -r script/ -f json -o bandit-report.json || true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json
        if-no-files-found: ignore
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json
        if-no-files-found: ignore
